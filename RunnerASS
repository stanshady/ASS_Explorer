package ASSExplorer;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.*;
import javafx.scene.paint.Color;
import javafx.stage.Stage;

public class RunnerASS extends Application {

    private Stage stage;
    private Pane root;
    private ASSInteract interact;
    private ASSMenu menu;
    private ASSLabels ASSLabels;
    private double angle, sideLen, swingLen;

    //root contains an ASSMenu(VBox), ASSInteract(Pane), and bunch of Labels
    public Parent setUpScene(double angle, double sideLen, double swingLen) {
        root = new Pane();
        root.setPrefSize(1000, 800);

        this.angle = angle;
        this.sideLen = sideLen;
        this.swingLen = swingLen;

        interact = new ASSInteract(angle, sideLen, swingLen);
        interact.setTranslateX(200);

        menu = new ASSMenu();

        //Adds all labels to root
        setUpLabels();

        root.getChildren().addAll(interact, menu);

        return root;
    }

    private void setUpLabels() {
        ASSLabels = new ASSLabels(interact);
        for (Label label : ASSLabels.getLabels())
            root.getChildren().addAll(label);
    }

    //***************************** ASSMenu Class ***************
    //Menu on the side of the App.
    private class ASSMenu extends VBox {
        private TextField textFieldAngle, textFieldSideLen, textFieldSwingLen;
        private Button showAltitude, hideAltitude, solve, reset;

        ASSMenu() {
            setPrefSize(200, 800);
            setPadding(new Insets(20, 20, 20, 20));
            setSpacing(30);

            // create a background fill
            BackgroundFill background_fill = new BackgroundFill(Color.GRAY,
                    CornerRadii.EMPTY, Insets.EMPTY);
            // create Background
            Background background = new Background(background_fill);
            // set background
            setBackground(background);

            textFieldAngle = new TextField(String.valueOf(angle));
            textFieldAngle.setPromptText("angle");
            textFieldAngle.setTranslateX(50);
            textFieldAngle.setMaxWidth(50);

            textFieldSideLen = new TextField(String.valueOf(sideLen));
            textFieldSideLen.setPromptText("sideLen");
            textFieldSideLen.setTranslateX(50);
            textFieldSideLen.setMaxWidth(50);

            textFieldSwingLen = new TextField(String.valueOf(swingLen));
            textFieldSwingLen.setPromptText("swingLen");
            textFieldSwingLen.setTranslateX(50);
            textFieldSwingLen.setMaxWidth(50);

            showAltitude = new Button("Show Altitude");
            showAltitude.setTranslateX(50);
            showAltitude.setOnAction(event -> {
                interact.showAltitude();
            });

            hideAltitude = new Button("Hide Altitude");
            hideAltitude.setTranslateX(50);
            hideAltitude.setOnAction(event -> {
                interact.hideAltitude();
            });

            Button showLabels = new Button("Show Labels");
            showLabels.setTranslateX(50);
            showLabels.setOnAction(event -> {
                for (Label label : ASSLabels.getLabels())
                    label.setOpacity(1);
            });


            Button hideLabels = new Button("Hide Labels");
            hideLabels.setTranslateX(50);
            hideLabels.setOnAction(event -> {
                for (Label label : ASSLabels.getLabels())
                    label.setOpacity(0);
            });

            solve = new Button("Solve");
            solve.setTranslateX(50);
            solve.setOnAction(event -> {
                System.out.println(interact.getData());
            });

            reset = new Button("Reset");
            reset.setTranslateX(50);
            reset.setOnAction(event -> {
                //get the ASS values from textFields.
                if (menu.isValidInput()) {
                    stage.setScene(new Scene(setUpScene(menu.getAngle(), menu.getSideLen(), menu.getSwingLen())));
                }
            });

            getChildren().addAll(textFieldAngle, textFieldSideLen, textFieldSwingLen, showAltitude, hideAltitude, showLabels, hideLabels, solve, reset);
        }

        //check to make sure the input is a double.
        //From NewBoston Gui Tutorial Ep 9,10
        private boolean isDouble(TextField input) {
            try {
                double text = Double.parseDouble(input.getText());
                return true;
            } catch (NumberFormatException e) {
                return false;
            }
        }

        public boolean isValidInput() {
            return isDouble(textFieldAngle) && isDouble(textFieldSideLen) && isDouble(textFieldSwingLen);
        }

        //Will eventually return -1.0 if text is not a double in [0,180).
        public double getAngle() {
            if (!isDouble(textFieldAngle)) {
                return -1;
            }
            return Double.parseDouble(textFieldAngle.getText());
        }

        //returns -1.0 if text is not a double > 0.
        public double getSideLen() {
            if (!isDouble(textFieldSideLen)) {
                return -1;
            }
            return Double.parseDouble(textFieldSideLen.getText());
        }

        //returns -1.0 if text is not a double > 0.
        public double getSwingLen() {
            if (!isDouble(textFieldSwingLen)) {
                return -1;
            }
            return Double.parseDouble(textFieldSwingLen.getText());
        }
    }

    @Override
    public void start(Stage primaryStage) throws Exception {
        stage = primaryStage;
        primaryStage.setScene(new Scene(setUpScene(55, 100, 90)));
        primaryStage.setTitle("ASS Explorer");
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}

