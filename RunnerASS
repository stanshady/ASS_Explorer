package ASSExplorer;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.TextField;
import javafx.scene.layout.*;
import javafx.scene.paint.Color;
import javafx.stage.Stage;

public class RunnerASS extends Application {

    private Pane root;
    private ASSInteract interact;
    private ASSMenu menu;

    //root will contain an ASSMenu(VBox), ASSInteract(Pane)
    public Parent setUpScene() {
        root = new Pane();
        root.setPrefSize(1000, 800);

        interact = new ASSInteract(55, 320, 300);
        menu = new ASSMenu();
        menu.setTranslateX(800);

        root.getChildren().addAll(interact, menu);

        return root;
    }

    @Override
    public void start(Stage primaryStage) throws Exception {
        primaryStage.setScene(new Scene(setUpScene()));
        primaryStage.setTitle("ASS Explorer");
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }

    //Menu on the side of the App
    private class ASSMenu extends VBox {
        private TextField angle, sideLen, swingLen;
        private Button showAltitude, hideAltitude, solve, reset;

        ASSMenu() {
            setPrefSize(200, 800);
            setPadding(new Insets(20, 20, 20, 20));
            setSpacing(30);

            // create a background fill
            BackgroundFill background_fill = new BackgroundFill(Color.GRAY,
                    CornerRadii.EMPTY, Insets.EMPTY);
            // create Background
            Background background = new Background(background_fill);
            // set background
            setBackground(background);

            angle = new TextField("55");
            angle.setPromptText("angle");
            angle.setTranslateX(50);
            angle.setMaxWidth(50);

            sideLen = new TextField("320");
            sideLen.setPromptText("sideLen");
            sideLen.setTranslateX(50);
            sideLen.setMaxWidth(50);

            swingLen = new TextField("300");
            swingLen.setPromptText("swingLen");
            swingLen.setTranslateX(50);
            swingLen.setMaxWidth(50);

            showAltitude = new Button("Show Altitude");
            showAltitude.setTranslateX(50);
            showAltitude.setOnAction(event -> {
                interact.showAltitude();
            });

            hideAltitude = new Button("Hide Altitude");
            hideAltitude.setTranslateX(50);
            hideAltitude.setOnAction(event -> {
                interact.hideAltitude();
            });

            solve = new Button("Solve");
            solve.setTranslateX(50);
            solve.setOnAction(event -> {
                System.out.println(interact.getData());
            });

            reset = new Button("Reset");
            reset.setTranslateX(50);
            reset.setOnAction(event -> {
                //get the ASS values from textFields.
                if (menu.isValidInput()) {
                    interact = new ASSInteract(menu.getAngle(), menu.getSideLen(), menu.getSwingLen());
                }
                root.getChildren().clear();
                root.getChildren().addAll(interact, menu);
            });

            getChildren().addAll(angle, sideLen, swingLen, showAltitude, hideAltitude, solve, reset);
        }

        //check to make sure the input is a double.
        //From NewBoston Gui Tutorial Ep 9,10
        private boolean isDouble(TextField input) {
            try {
                double text = Double.parseDouble(input.getText());
                return true;
            } catch (NumberFormatException e) {
                return false;
            }
        }

        public boolean isValidInput() {
            return isDouble(angle) && isDouble(sideLen) && isDouble(swingLen);
        }

        //Will eventually return -1.0 if text is not a double in [0,180).
        public double getAngle() {
            if (!isDouble(angle)) {
                return -1;
            }
            return Double.parseDouble(angle.getText());
        }

        //returns -1.0 if text is not a double > 0.
        public double getSideLen() {
            if (!isDouble(sideLen)) {
                return -1;
            }
            return Double.parseDouble(sideLen.getText());
        }

        //returns -1.0 if text is not a double > 0.
        public double getSwingLen() {
            if (!isDouble(swingLen)) {
                return -1;
            }
            return Double.parseDouble(swingLen.getText());
        }
    }

}
