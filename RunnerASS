package ASSExplorer;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class RunnerASS extends Application {

    private final double HEIGHT = 600;
    private final double WIDTH = 800;
    private Stage stage;
    private Pane root;
    private ASSInteract interact;
    private ASSMenu menu;
    private ASSLabels ASSLabels;
    private double angle, sideLen, swingLen;

    //testing
    boolean onAltitude = false;
    boolean onLabels = false;

    //root contains an ASSMenu(VBox), ASSInteract(Pane), and bunch of Labels
    public Parent setUpScene(double angle, double sideLen, double swingLen) {
        root = new Pane();
        root.setPrefSize(WIDTH, HEIGHT);

        onAltitude = false;
        onLabels = false;

        this.angle = angle;
        this.sideLen = sideLen;
        this.swingLen = swingLen;

        interact = new ASSInteract(angle, sideLen, swingLen);
        interact.setTranslateX(WIDTH - HEIGHT);

        menu = new ASSMenu();

        root.getChildren().addAll(interact, menu);

        //Adds all Labels to root
        setUpLabels();


        return root;
    }

    private void setUpLabels() {
        ASSLabels = new ASSLabels(interact);
        for (Label label : ASSLabels.getLabels())
            root.getChildren().addAll(label);
    }

    //***************************** ASSMenu Class ***************
    //Menu on the side of the App.
    private class ASSMenu extends VBox {
        private TextField textFieldAngle, textFieldSideLen, textFieldSwingLen;
        private Button showAltitude, hideAltitude, solve, draw;

        ASSMenu() {
            setPrefSize(WIDTH - HEIGHT, HEIGHT);
            setPadding(new Insets(20, 0, 20, 15));
            setSpacing(5);

            // create a background fill
            BackgroundFill background_fill = new BackgroundFill(Color.WHITESMOKE,
                    CornerRadii.EMPTY, Insets.EMPTY);
            // create Background
            Background background = new Background(background_fill);
            // set background
            setBackground(background);

            //testing
            ChoiceBox<String> choiceBox = new ChoiceBox<>();

            choiceBox.getItems().addAll("A =", "B =", "C =");
            choiceBox.setValue("A =");


            textFieldAngle = new TextField(String.valueOf(angle));
            textFieldAngle.setPromptText("angle");
            //textFieldAngle.setTranslateX(120);
            textFieldAngle.setMaxWidth(50);


            //testing

            Text textAngle = new Text("Angle");
            textAngle.setFont(new Font(20));
            textAngle.setFill(Color.FIREBRICK);


            HBox hBox = new HBox();
            //hBox.setTranslateX(50);
            hBox.setSpacing(10);
            hBox.getChildren().addAll(choiceBox, textFieldAngle);


            textFieldSwingLen = new TextField(String.valueOf(swingLen));
            textFieldSwingLen.setPromptText("swingLen");

            textFieldSwingLen.setMaxWidth(50);

            Text textSwingLen = new Text("Opposite Side");
            textSwingLen.setFont(new Font(20));
            textSwingLen.setFill(Color.FIREBRICK
            );


            ChoiceBox<String> choiceBox1 = new ChoiceBox<>();

            choiceBox1.getItems().addAll("a =", "b =", "c =");
            choiceBox1.setValue("a =");

            HBox hBox1 = new HBox();
            //hBox.setTranslateX(50);
            hBox1.setSpacing(10);
            hBox1.getChildren().addAll(choiceBox1, textFieldSwingLen);


            Text textSideLen = new Text("Adjacent Side");
            textSideLen.setFont(new Font(20));
            textSideLen.setFill(Color.DARKSLATEBLUE);

            ChoiceBox<String> choiceBox2 = new ChoiceBox<>();

            choiceBox2.getItems().addAll("a =", "b =", "c =");
            choiceBox2.setValue("b =");


            textFieldSideLen = new TextField(String.valueOf(sideLen));
            textFieldSideLen.setPromptText("sideLen");
            textFieldSideLen.setMaxWidth(50);

            HBox hBox2 = new HBox();
            //hBox.setTranslateX(50);
            hBox2.setSpacing(10);
            hBox2.getChildren().addAll(choiceBox2, textFieldSideLen);


            Text space = new Text(" ");
            space.setFont(new Font(25));


            draw = new Button("Draw");
            draw.setStyle("-fx-font-size:20");
            draw.setOnAction(event -> {
                //get the ASS values from textFields.
                if (menu.isValidInput()) {
                    stage.setScene(new Scene(setUpScene(menu.getAngle(), menu.getSideLen(), menu.getSwingLen())));
                }
            });

            solve = new Button("Solve");
            //how does this work?
            solve.setStyle("-fx-font-size:20");
            solve.setOnAction(event -> {
                SolveStage.display(interact);
            });

            HBox hBoxDrawSolve = new HBox();
            hBoxDrawSolve.setSpacing(15);
            hBoxDrawSolve.setTranslateX(5);
            hBoxDrawSolve.getChildren().addAll(draw, solve);

            //temporary buffer
            Text buffer = new Text(" ");
            buffer.setFont(new Font(10));


            showAltitude = new Button("Show Altitude");
            showAltitude.setOnAction(event -> {
                interact.showAltitude();
            });

            hideAltitude = new Button("Hide Altitude");
            hideAltitude.setOnAction(event -> {
                interact.hideAltitude();
            });


            HBox hBoxAltitude = new HBox();
            hBoxAltitude.setSpacing(5);
            hBoxAltitude.getChildren().addAll(showAltitude, hideAltitude);


            Button showLabels = new Button("Show Labels");
            showLabels.setOnAction(event -> {
                //ASSLabels.upDateSwingLenLabel();
                for (Label label : ASSLabels.getLabels())
                    label.setOpacity(1);

            });


            Button hideLabels = new Button("Hide Labels");
            hideLabels.setOnAction(event -> {
                for (Label label : ASSLabels.getLabels())
                    label.setOpacity(0);
            });


            HBox hBoxLabels = new HBox();
            hBoxLabels.setSpacing(5);
            hBoxLabels.getChildren().addAll(showLabels, hideLabels);


            Text space0 = new Text(" ");
            space0.setFont(new Font(5));
            Text space1 = new Text(" ");
            space1.setFont(new Font(5));

            ToggleButton tb1 = new ToggleButton("Altitude");

            tb1.setOnAction(event -> {
                if (onAltitude) {
                    interact.hideAltitude();
                    onAltitude = false;
                } else {
                    interact.showAltitude();
                    onAltitude = true;
                }
            });

            ToggleButton tb2 = new ToggleButton("Labels");

            tb2.setOnAction(event -> {
                if (onLabels) {
                    for (Label label : ASSLabels.getLabels())
                        label.setOpacity(0);

                    onLabels = false;
                } else {
                    for (Label label : ASSLabels.getLabels())
                        label.setOpacity(1);
                    onLabels = true;
                }
            });

            HBox hBoxToggleButtons = new HBox();
            hBoxToggleButtons.setSpacing(20);
            hBoxToggleButtons.setTranslateX(20);
            hBoxToggleButtons.getChildren().addAll(tb1,tb2);


            getChildren().addAll(textAngle, hBox, space0, textSideLen, hBox2, space1, textSwingLen, hBox1, space, hBoxDrawSolve, buffer,hBoxToggleButtons);
        }


        //check to make sure the input is a double.
        //From NewBoston Gui Tutorial Ep 9,10
        private boolean isDouble(TextField input) {
            try {
                double text = Double.parseDouble(input.getText());
                return true;
            } catch (NumberFormatException e) {
                return false;
            }
        }

        public boolean isValidInput() {
            return isDouble(textFieldAngle) && isDouble(textFieldSideLen) && isDouble(textFieldSwingLen);
        }

        //Will eventually return -1.0 if text is not a double in [0,180).
        public double getAngle() {
            if (!isDouble(textFieldAngle)) {
                return -1;
            }
            return Double.parseDouble(textFieldAngle.getText());
        }

        //returns -1.0 if text is not a double > 0.
        public double getSideLen() {
            if (!isDouble(textFieldSideLen)) {
                return -1;
            }
            return Double.parseDouble(textFieldSideLen.getText());
        }

        //returns -1.0 if text is not a double > 0.
        public double getSwingLen() {
            if (!isDouble(textFieldSwingLen)) {
                return -1;
            }
            return Double.parseDouble(textFieldSwingLen.getText());
        }
    }

    @Override
    public void start(Stage primaryStage) throws Exception {
        stage = primaryStage;
        primaryStage.setScene(new Scene(setUpScene(55, 100, 90)));
        primaryStage.setTitle("ASS Explorer");
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}

