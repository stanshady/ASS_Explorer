package ASSExplorer;

import javafx.scene.control.Label;
import javafx.scene.text.Font;
import javafx.scene.transform.Rotate;

import java.text.DecimalFormat;
import java.util.ArrayList;

// Contains all Label objects (A = 37, a = 12.5, etc) for ASS
// Communicates with ASSInteract object _interact_ by
// passing it as a parameter in the constructor.
public class ASSLabels {

    private ArrayList<Label> labels;
    private ASSInteract interact;


    //The labels
    private Label swingAngleLabel, sideLenLabel, swingLenLabel, baseAngleLabel, sideAngleLabel, swingAngleValueLabel;


    ASSLabels(ASSInteract interact) {
        labels = new ArrayList<>();
        this.interact = interact;

        setUpSwingAngleLabel();

        setUpSideLenLabel();

        setUpBaseAngleLabel();

        setUpSideAngleLabel();

        //too hard.
        // setUpSwingAngleValueLabel();

        //does not work...!
        // setUpSwingLenLabel();

    }

    private void setUpSwingAngleValueLabel() {
        swingAngleValueLabel = new Label(formatDecimals(interact.getData().getSwingAngle()));
        swingAngleValueLabel.setFont(new Font(20));
        swingAngleValueLabel.setTranslateX(interact.getTranslateX() + interact.getStartXBase() + 36);
        swingAngleValueLabel.setTranslateY(interact.getTranslateY() + interact.getStartYBase() - 36);
        swingAngleValueLabel.setOpacity(0);

        labels.add(swingAngleValueLabel);
    }

    private void setUpSwingAngleLabel() {
        swingAngleLabel = new Label("A");
        swingAngleLabel.setFont(new Font(20));
        swingAngleLabel.setTranslateX(interact.getTranslateX() + interact.getStartXBase() - 18);
        swingAngleLabel.setTranslateY(interact.getTranslateY() + interact.getStartYBase() - 12);
        swingAngleLabel.setOpacity(0);

        labels.add(swingAngleLabel);
    }

    private void setUpBaseAngleLabel() {
        baseAngleLabel = new Label("C");
        baseAngleLabel.setFont(new Font(20));
        baseAngleLabel.setTranslateX(interact.getTranslateX() + interact.getSwing().getStartX() - 18);
        baseAngleLabel.setTranslateY(interact.getTranslateY() + interact.getSwing().getStartY() - 24);
        baseAngleLabel.setOpacity(0);

        labels.add(baseAngleLabel);
    }

    private void setUpSideAngleLabel() {
        sideAngleLabel = new Label("B");
        sideAngleLabel.setFont(new Font(20));
        sideAngleLabel.setTranslateX(205);
        sideAngleLabel.setMouseTransparent(true);
        // sideAngleLabel.setTranslateX(interact.getTranslateX() + interact.getSwing().getEndX() - 18);
        // sideAngleLabel.setTranslateY(interact.getTranslateY() + interact.getSwing().getEndY()- 24);
        sideAngleLabel.layoutXProperty().bind(interact.getCircle().centerXProperty());
        sideAngleLabel.layoutYProperty().bind(interact.getCircle().centerYProperty());

        //sideAngleLabel.setTranslateX(interact.getTranslateX() + interact.getStartXBase() - 18);
        //sideAngleLabel.setTranslateY(interact.getTranslateY() + interact.getStartYBase()-12);
        sideAngleLabel.setOpacity(0);

        labels.add(sideAngleLabel);
    }


    private void setUpSideLenLabel() {
        sideLenLabel = new Label(formatDecimals(interact.getData().getSideLen()));
        sideLenLabel.setFont(new Font(20));

/*
        BackgroundFill background_fill = new BackgroundFill(Color.WHITESMOKE,
                CornerRadii.EMPTY,
                Insets.EMPTY);
        Background background = new Background(background_fill);
        sideLenLabel.setBackground(background);
*/

        //1st calculate midpoint of sideLen:
        double midX = 0.5 * (interact.getSide().getEndX() - interact.getSide().getStartX());
        double midY = 0.5 * (interact.getSide().getEndY() - interact.getSide().getStartY());

        sideLenLabel.setTranslateX(interact.getTranslateX() + interact.getSide().getStartX() + midX);
        sideLenLabel.setTranslateY(interact.getTranslateY() + interact.getSide().getStartY() + midY);
        sideLenLabel.setOpacity(0);

        Rotate rotate = new Rotate(-1 * interact.getData().getSwingAngle(),
                sideLenLabel.getLayoutX(),
                sideLenLabel.getLayoutY());
        sideLenLabel.getTransforms().addAll(rotate);

        //move along normal
        sideLenLabel.setTranslateX(sideLenLabel.getTranslateX() + 24 * Math.cos((interact.getData().getSwingAngle() + 90) * Math.PI / 180));
        sideLenLabel.setTranslateY(sideLenLabel.getTranslateY() - 24 * Math.sin((interact.getData().getSwingAngle() + 90) * Math.PI / 180));

        labels.add(sideLenLabel);
    }


    //POS doesn't work.  New hard problem...but it shouldn't be hard
    private void setUpSwingLenLabel() {
        swingLenLabel = new Label(String.valueOf(interact.getData().getSwingLen()));
        swingLenLabel.setFont(new Font(20));

/*
        BackgroundFill background_fill = new BackgroundFill(Color.WHITESMOKE,
                CornerRadii.EMPTY,
                Insets.EMPTY);
        Background background = new Background(background_fill);
        swingLenLabel.setBackground(background);
*/


        //1st calculate midpoint of sideLen:
        double midX = 0.5 * (interact.getSwing().getEndX() - interact.getSwing().getStartX());
        double midY = 0.5 * (interact.getSwing().getEndY() - interact.getSwing().getStartY());


        swingLenLabel.setTranslateX(interact.getTranslateX() + interact.getSwing().getStartX() + midX);
        swingLenLabel.setTranslateY(interact.getTranslateY() + interact.getSwing().getStartY() + midY);
        swingLenLabel.setOpacity(0);

        //calculate swing's current angle
        double deltaY = interact.getSwing().getEndY() - interact.getSwing().getStartY();
        double deltaX = interact.getSwing().getEndX() - interact.getSwing().getStartX();
        double swingCurrentAngle = Math.atan(deltaY / deltaX) * 180 / Math.PI;


        Rotate rotate = new Rotate(swingCurrentAngle,
                swingLenLabel.getLayoutX(),
                swingLenLabel.getLayoutY());
        swingLenLabel.getTransforms().addAll(rotate);

        //move along normal
        swingLenLabel.setTranslateX(swingLenLabel.getTranslateX() + 24 * Math.cos((swingCurrentAngle + 90) * Math.PI / 180));
        swingLenLabel.setTranslateY(swingLenLabel.getTranslateY() - 30 * Math.sin((swingCurrentAngle + 90) * Math.PI / 180));


        labels.add(swingLenLabel);
    }

    //setters...just use setVisible()?
    public void setSwingAngleLabelOpacity(int n) {
        if (n != 1 && n != 0)
            return;
        swingAngleLabel.setOpacity(n);
    }

    public void setSideLenLabelOpacity(int n) {
        if (n != 1 && n != 0)
            return;
        sideLenLabel.setOpacity(n);
    }

    public ArrayList<Label> getLabels() {
        return labels;
    }

    public void upDateSwingLenLabel() {

        //1st calculate midpoint of sideLen:
        double midX = 0.5 * (interact.getSwing().getEndX() - interact.getSwing().getStartX());
        double midY = 0.5 * (interact.getSwing().getEndY() - interact.getSwing().getStartY());


        swingLenLabel.setTranslateX(interact.getTranslateX() + interact.getSwing().getStartX() + midX);
        swingLenLabel.setTranslateY(interact.getTranslateY() + interact.getSwing().getStartY() + midY);
        swingLenLabel.setOpacity(0);

        //calculate swing's current angle
        double deltaY = interact.getSwing().getEndY() - interact.getSwing().getStartY();
        double deltaX = interact.getSwing().getEndX() - interact.getSwing().getStartX();
        double swingCurrentAngle = Math.atan(deltaY / deltaX) * 180 / Math.PI;

/*
        Rotate rotate = new Rotate(swingCurrentAngle,
                swingLenLabel.getLayoutX(),
                swingLenLabel.getLayoutY());
        swingLenLabel.getTransforms().addAll(rotate);
*/
        //move along normal
        swingLenLabel.setTranslateX(swingLenLabel.getTranslateX() + 24 * Math.cos((swingCurrentAngle + 90) * Math.PI / 180));
        swingLenLabel.setTranslateY(swingLenLabel.getTranslateY() - 30 * Math.sin((swingCurrentAngle + 90) * Math.PI / 180));


        labels.add(swingLenLabel);
    }

    public String formatDecimals(double num) {
        DecimalFormat df = new DecimalFormat("#.###");
        return df.format(num);
    }


}
